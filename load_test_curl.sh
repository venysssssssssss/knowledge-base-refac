#!/bin/bash

# Script para testar 70 consultas simult√¢neas usando curl
# Usage: ./load_test_curl.sh

FRONTEND_URL="http://localhost:3000"
ENDPOINT="/api/ai/query"
NUM_REQUESTS=70
TIMEOUT=60

# Array de perguntas para teste
QUESTIONS=(
    "Quem pode solicitar altera√ß√µes cadastrais?"
    "Quais documentos s√£o necess√°rios para altera√ß√£o de nome?"
    "Qual √© o prazo para conclus√£o de uma altera√ß√£o cadastral?"
    "Como funciona a altera√ß√£o de nome social?"
    "Quais s√£o os procedimentos para cliente interditado?"
    "Como enviar documentos para o Banrisul?"
    "O que fazer quando o cliente tem telefone sem prefixo 9?"
    "Quais s√£o os sistemas mencionados no manual?"
    "Como √© feita a valida√ß√£o no site da Receita Federal?"
    "Quais s√£o os tipos de altera√ß√µes cadastrais dispon√≠veis?"
    "Qual email usar para envio de documentos?"
    "Como alterar CPF no sistema?"
    "Quais s√£o os prazos do sistema Zendesk?"
    "Como funciona a altera√ß√£o de estado civil?"
    "Procedimentos para cliente impossibilitado de assinar?"
    "Como fazer transfer√™ncia assistida?"
    "Quais s√£o as formas de envio pelo correio?"
    "Como registrar manifesta√ß√£o pendente?"
    "Procedimentos para menor de idade?"
    "Como funciona a sincroniza√ß√£o de dados?"
)

echo "üöÄ INICIANDO TESTE DE CARGA COM CURL - $NUM_REQUESTS CONSULTAS SIMULT√ÇNEAS"
echo "============================================================================="
echo "üìç Endpoint: $FRONTEND_URL$ENDPOINT"
echo "üî¢ N√∫mero de requisi√ß√µes: $NUM_REQUESTS"
echo "‚è±Ô∏è Timeout por requisi√ß√£o: ${TIMEOUT}s"
echo "üïí Hor√°rio de in√≠cio: $(date)"
echo "============================================================================="

# Criar diret√≥rio para logs
mkdir -p load_test_logs
LOG_DIR="load_test_logs/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$LOG_DIR"

# Fun√ß√£o para fazer uma requisi√ß√£o
make_request() {
    local request_id=$1
    local question="${QUESTIONS[$((request_id % ${#QUESTIONS[@]}))]}"
    local start_time=$(date +%s.%N)
    
    # Preparar payload JSON
    local payload=$(cat <<EOF
{
    "question": "$question",
    "max_tokens": 512,
    "temperature": 0.7,
    "search_limit": 3,
    "score_threshold": 0.6
}
EOF
)
    
    # Fazer requisi√ß√£o com curl
    local response=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTIME_TOTAL:%{time_total}\nTIME_CONNECT:%{time_connect}\nTIME_PRETRANSFER:%{time_pretransfer}\nTIME_STARTTRANSFER:%{time_starttransfer}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d "$payload" \
        --max-time $TIMEOUT \
        "$FRONTEND_URL$ENDPOINT" \
        2>&1)
    
    local end_time=$(date +%s.%N)
    local total_time=$(echo "$end_time - $start_time" | bc -l)
    
    # Extrair m√©tricas da resposta
    local http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
    local time_total=$(echo "$response" | grep "TIME_TOTAL:" | cut -d: -f2)
    local time_connect=$(echo "$response" | grep "TIME_CONNECT:" | cut -d: -f2)
    local time_starttransfer=$(echo "$response" | grep "TIME_STARTTRANSFER:" | cut -d: -f2)
    
    # Remover m√©tricas da resposta para obter apenas o JSON
    local json_response=$(echo "$response" | sed '/HTTP_CODE:/,$d')
    
    # Salvar resultado
    echo "REQUEST_$request_id: HTTP $http_code, Time: ${time_total}s, Question: $question" >> "$LOG_DIR/summary.log"
    echo "$json_response" > "$LOG_DIR/response_$request_id.json"
    
    # Log detalhado
    cat << EOF >> "$LOG_DIR/detailed_$request_id.log"
REQUEST_ID: $request_id
QUESTION: $question
HTTP_CODE: $http_code
TIME_TOTAL: $time_total
TIME_CONNECT: $time_connect
TIME_STARTTRANSFER: $time_starttransfer
SCRIPT_TOTAL_TIME: $total_time
RESPONSE: $json_response
EOF
    
    # Output para monitoramento em tempo real
    if [[ "$http_code" == "200" ]]; then
        echo "‚úÖ Request $request_id: ${time_total}s"
    else
        echo "‚ùå Request $request_id: HTTP $http_code"
    fi
}

# Executar requisi√ß√µes em paralelo
echo "üîÑ Enviando $NUM_REQUESTS requisi√ß√µes simult√¢neas..."
echo "üìÅ Logs sendo salvos em: $LOG_DIR"
echo ""

start_time=$(date +%s.%N)

# Usar GNU parallel se dispon√≠vel, sen√£o usar background jobs
if command -v parallel &> /dev/null; then
    echo "üöÄ Usando GNU parallel para execu√ß√£o otimizada..."
    export -f make_request
    export FRONTEND_URL ENDPOINT TIMEOUT LOG_DIR
    export QUESTIONS
    seq 1 $NUM_REQUESTS | parallel -j $NUM_REQUESTS make_request
else
    echo "üîÑ Usando background jobs (instale 'parallel' para melhor performance)..."
    
    # Executar em background
    for i in $(seq 1 $NUM_REQUESTS); do
        make_request $i &
    done
    
    # Aguardar todas as requisi√ß√µes terminarem
    wait
fi

end_time=$(date +%s.%N)
total_time=$(echo "$end_time - $start_time" | bc -l)

echo ""
echo "============================================================================="
echo "üìä AN√ÅLISE DOS RESULTADOS"
echo "============================================================================="

# Analisar resultados
total_requests=$NUM_REQUESTS
successful_requests=$(grep -c "HTTP 200" "$LOG_DIR/summary.log" 2>/dev/null || echo "0")
failed_requests=$((total_requests - successful_requests))
success_rate=$(echo "scale=1; ($successful_requests * 100) / $total_requests" | bc -l)

echo "‚è±Ô∏è Tempo total de execu√ß√£o: ${total_time}s"
echo "üöÄ Requisi√ß√µes por segundo: $(echo "scale=2; $total_requests / $total_time" | bc -l) req/s"
echo ""
echo "üìà ESTAT√çSTICAS GERAIS:"
echo "   Total de requisi√ß√µes: $total_requests"
echo "   ‚úÖ Sucessos: $successful_requests (${success_rate}%)"
echo "   ‚ùå Falhas: $failed_requests"
echo ""

# Estat√≠sticas de tempo (apenas sucessos)
if [[ $successful_requests -gt 0 ]]; then
    echo "‚ö° TEMPOS DE RESPOSTA (apenas sucessos):"
    
    # Extrair tempos de resposta dos sucessos
    grep "HTTP 200" "$LOG_DIR/summary.log" | \
    sed 's/.*Time: \([0-9.]*\)s.*/\1/' | \
    sort -n > "$LOG_DIR/response_times.txt"
    
    if [[ -s "$LOG_DIR/response_times.txt" ]]; then
        local min_time=$(head -n1 "$LOG_DIR/response_times.txt")
        local max_time=$(tail -n1 "$LOG_DIR/response_times.txt")
        local avg_time=$(awk '{sum+=$1} END {print sum/NR}' "$LOG_DIR/response_times.txt")
        
        echo "   M√≠nimo: ${min_time}s"
        echo "   M√°ximo: ${max_time}s"
        echo "   M√©dia: $(printf "%.2f" $avg_time)s"
        
        # Percentis
        local total_lines=$(wc -l < "$LOG_DIR/response_times.txt")
        echo "   P50: $(sed -n "$((total_lines * 50 / 100 + 1))p" "$LOG_DIR/response_times.txt")s"
        echo "   P90: $(sed -n "$((total_lines * 90 / 100 + 1))p" "$LOG_DIR/response_times.txt")s"
        echo "   P95: $(sed -n "$((total_lines * 95 / 100 + 1))p" "$LOG_DIR/response_times.txt")s"
    fi
fi

echo ""

# Mostrar alguns erros se houver
if [[ $failed_requests -gt 0 ]]; then
    echo "‚ùå AMOSTRA DE ERROS:"
    grep -v "HTTP 200" "$LOG_DIR/summary.log" | head -5
    echo ""
fi

# Recomenda√ß√µes
echo "üí° AN√ÅLISE E RECOMENDA√á√ïES:"
if (( $(echo "$success_rate >= 95" | bc -l) )); then
    echo "   ‚úÖ Excelente! Sistema suporta bem a carga."
elif (( $(echo "$success_rate >= 80" | bc -l) )); then
    echo "   ‚ö†Ô∏è  Bom, mas pode ser otimizado."
else
    echo "   ‚ùå Sistema com dificuldades sob carga."
fi

echo ""
echo "============================================================================="
echo "‚úÖ TESTE DE CARGA CONCLU√çDO"
echo "============================================================================="
echo "üìÅ Logs detalhados dispon√≠veis em: $LOG_DIR"
echo "üìä Arquivo de resumo: $LOG_DIR/summary.log"
echo ""

# Comando curl individual para teste
echo "üîß COMANDO CURL PARA TESTE INDIVIDUAL:"
echo "============================================================================="
cat << 'EOF'
curl -X POST http://localhost:3000/api/ai/query \
  -H "Content-Type: application/json" \
  -d '{
    "question": "Quem pode solicitar altera√ß√µes cadastrais?",
    "max_tokens": 512,
    "temperature": 0.7,
    "search_limit": 3,
    "score_threshold": 0.6
  }' \
  -w "\nTempo de resposta: %{time_total}s\nC√≥digo HTTP: %{http_code}\n"
EOF
echo "============================================================================="
